type Playlist{
    id: ID!
    owner: User!
    title: String!
    privacy: Boolean!
    date: String!
    sort: String!
    playlistDetail:[PlaylistDetail!]!
    playlistSub: [PlaylistSub!]!
    videos: [Video!]!
    description: String!
}

extend type Query{
    playlists:[Playlist!]!
    playlistDetails:[PlaylistDetail!]!
    getPlaylistByOwnerID(id:ID!, limit: Int):[Playlist!]!
    getPlaylistByID(id:ID!):Playlist!
    getVideoCountOnPlaylist(id:ID!): Int!
    getVideoOfPlaylist(id:ID!):[Video!]!
    getFirstVideoOfPlaylist(id:ID!):PlaylistDetail!
    getPlaylistSearch(keyword: String!):[Playlist!]!
    getPlaylistSub: [PlaylistSub!]!
}

input newPlaylist{
    title: String!
    privacy: Boolean!
}

input updatedPlaylist{
    title: String
    privacy: Boolean
    sort: String
    description: String
}

extend type Mutation{
    createPlaylist(input:newPlaylist): Playlist!
    updatePlaylist(id: ID!, input:updatedPlaylist):Playlist!
    deletePlaylist(id: ID!): Boolean!
    createPlaylistDetail(input:newPlaylistDetail): PlaylistDetail!
    updatePlaylistDetail(id: ID!, input:newPlaylistDetail):PlaylistDetail!
    deletePlaylistDetail(playlistID: ID!, videoID: ID!):Boolean!
    createPlaylistSub(input: newPlaylistSub): PlaylistSub!
    deletePlaylistSub(playlistID:ID!): Boolean!
    swapPlaylistDetail(newID:ID!, tempID:ID!): PlaylistDetail!
}

type PlaylistDetail{
    playlistId: ID!
    video: Video!
    tempId: ID!
}

input newPlaylistDetail{
    playlistId: ID!
    videoID: ID!
}

type PlaylistSub{
    playlist: Playlist!
    user: User!
}

input newPlaylistSub{
    playlistID: ID!
}