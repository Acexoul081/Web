scalar Time
type AuthToken{
    accessToken:String!
    expiredAt: Time!
}
type AuthResponse{
    authToken: AuthToken!
    user: User!
}
type User{
    id: ID!
    username: String!
    email: String!
    password: String!
    profilePic: String!
    membership: MembershipDetail
    videos: [Video!]!
    subscription: [Abonemen!]!
    subscriber: [Abonemen!]!
    playlists:[Playlist!]!
    playlistSub: [PlaylistSub!]!
    location: String!
    description: String!
    joinDate: String!
    link: String!
    banner: String!
}

input loginInput{
    email:String!
    password:String!
}

input newUser{
    username: String!
    email: String!
    password: String
    profilePic: String!
}

input updatedUser{
    description: String
    link: String
    banner: String
    icon: String
}

extend type Query{
    users:[User!]!
    getUser(id:ID!):User!
    getUserSearch(keyword:String!):[User!]!
    getNotification(ids: [ID!]!):Notification!
}

type Notification{
    posts: [Post!]!
    videos: [Video!]!
}

extend type Mutation{
    createUser(input:newUser): AuthResponse!
    login(input: loginInput!): AuthResponse!
    updateUser(input:updatedUser!):User!
    deleteUser(id: ID!):Boolean!
    changeUserLocation(location: String!):User!
    insertAbout(description: String!):User!
    updateAbout(description: String!): User!
}