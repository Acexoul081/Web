# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: models/models_gen.go
  package: models

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "BackEnd/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  User:
    model:
      - BackEnd/models.User
    fields:
      videos:
        resolver: true
      subscription:
        resolver: true
      subscriber:
        resolver: true
      playlists:
        resolver: true
      membership:
        resolver: true
      playlistSub:
        resolver: true
  Video:
    model: BackEnd/models.Video
    fields:
      user:
        resolver: true
      comments:
        resolver: true
      like:
        resolver: true
  Comment:
    model: BackEnd/models.Comment
    fields:
      user:
        resolver: true
      like:
        resolver: true
      replies:
        resolver: true
  Reply:
    model: BackEnd/models.Reply
    fields:
      user:
        resolver: true
      like:
        resolver: true
  LikeDetail:
    model: BackEnd/models.LikeDetail
    fields:
      user:
        resolver: true
      video:
        resolver: true
  CommentLikeDetail:
    model: BackEnd/models.CommentLikeDetail
    fields:
      user:
        resolver: true
      video:
        resolver: true
  ReplyLikeDetail:
    model: BackEnd/models.ReplyLikeDetail
    fields:
      user:
        resolver: true
      video:
        resolver: true
  Abonemen:
    model: BackEnd/models.Abonemen
    fields:
      subscriber:
        resolver: true
      user:
        resolver: true
      notification:
        resolver: false
  Playlist:
    model: BackEnd/models.Playlist
    fields:
      owner:
        resolver: true
      playlistDetail:
        resolver: true
      playlistSub:
        resolver: true
      videos:
        resolver: true
  PlaylistDetail:
    model: BackEnd/models.PlaylistDetail
    fields:
      video:
        resolver: true
  PlaylistSub:
    model: BackEnd/models.PlaylistSub
    fields:
      user:
        resolver: true
      playlist:
        resolver: true
  MembershipDetail:
    model: BackEnd/models.MembershipDetail
    fields:
      membership:
        resolver: true
  Post:
    model: BackEnd/models.Post
    fields:
      user:
        resolver: true
      channel:
        resolver: true
      like:
        resolver: true
  PostLikeDetail:
    model: BackEnd/models.PostLikeDetail
    fields:
      post:
        resolver: true
      user:
        resolver: true
